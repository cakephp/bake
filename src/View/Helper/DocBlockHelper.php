<?php
namespace Bake\View\Helper;

use Cake\Collection\Collection;
use Cake\Core\App;
use Cake\Database\Type;
use Cake\ORM\Association;
use Cake\Utility\Inflector;
use Cake\View\Helper;
use function array_filter;
use function array_values;
use function sprintf;

/**
 * DocBlock helper
 */
class DocBlockHelper extends Helper
{
    protected $_annotationSpacing = true;

    /**
     * Writes the DocBlock header for a class which includes the property and method declarations. Annotations are
     * sorted and grouped by type and value. Groups of annotations are separated by blank lines.
     *
     * @param string $className The class this comment block is for.
     * @param string $classType The type of class (example, Entity)
     * @param array $annotations An array of PHP comment block annotations.
     * @return string The DocBlock for a class header.
     */
    public function classDescription($className, $classType, array $annotations)
    {
        $lines = [];
        if ($className && $classType) {
            $lines[] = "{$className} {$classType}";
            $lines[] = "";
        }

        foreach ($annotations as $ann) {
            $lines[] = implode(' ', array_filter(array_values($ann)));
        }

        $lines = array_merge(["/**"], (new Collection($lines))->map(function ($line) {
            return rtrim(" * {$line}");
        })->toArray(), [" */"]);

        return implode("\n", $lines);
    }

    /**
     * Converts an entity class type to its DocBlock hint type counterpart.
     *
     * @param string $type The entity class type (a fully qualified class name).
     * @param \Cake\ORM\Association $association The association related to the entity class.
     * @return string The DocBlock type
     */
    public function associatedEntityTypeToHintType($type, Association $association)
    {
        if ($association->type() === Association::MANY_TO_MANY ||
            $association->type() === Association::ONE_TO_MANY
        ) {
            return $type . '[]';
        }

        return $type;
    }

    /**
     * Builds a map of entity columns as DocBlock types for use
     * in generating `@property` hints.
     *
     * This method expects a property schema as generated by
     * `\Bake\Shell\Task\ModelTask::getEntityPropertySchema()`.
     *
     * The generated map has the format of
     *
     * ```
     * [
     *     'property-name' => 'doc-block-type',
     *     ...
     * ]
     * ```
     *
     * @see \Bake\Shell\Task\ModelTask::getEntityPropertySchema
     *
     * @param array $propertySchema The property schema to use for generating the type map.
     * @return array The property DocType map.
     */
    public function buildEntityPropertyHints(array $propertySchema)
    {
        $properties = [];
        $columns = array_filter($propertySchema, function (array $info) {
            return $info['kind'] === 'column';
        });
        foreach ($columns as $property => $info) {
            $type = $this->columnTypeToHintType($info['type']);
            if (!empty($info['null'])) {
                $type .= '|null';
            }

            $properties[] = [
                'prefix' => '@property',
                'type' => $type,
                'property' => sprintf('$%s', $property),
                'comment' => $info['comment'],
            ];
        }

        if (!empty($properties)) {
            $properties[] = [];
        }

        $associations = array_filter($propertySchema, function (array $info) {
            return $info['kind'] === 'association';
        });
        foreach ($associations as $property => $info) {
            $type = $this->associatedEntityTypeToHintType($info['type'], $info['association']);
            $properties[] = [
                'prefix' => '@property',
                'type' => $type,
                'property' => sprintf('$%s', $property),
                'comment' => null,
            ];
        }

        return $properties;
    }

    /**
     * Converts a column type to its DocBlock type counterpart.
     *
     * This method only supports the default CakePHP column types,
     * custom column/database types will be ignored.
     *
     * @see \Cake\Database\Type
     *
     * @param string $type The column type.
     * @return null|string The DocBlock type, or `null` for unsupported column types.
     */
    public function columnTypeToHintType($type)
    {
        switch ($type) {
            case 'string':
            case 'text':
            case 'uuid':
                return 'string';

            case 'integer':
            case 'biginteger':
            case 'smallinteger':
            case 'tinyinteger':
                return 'int';

            case 'float':
            case 'decimal':
                return 'float';

            case 'boolean':
                return 'bool';

            case 'array':
            case 'json':
                return 'array';

            case 'binary':
                return 'string|resource';

            case 'date':
            case 'datetime':
            case 'time':
            case 'timestamp':
                $dbType = Type::build($type);
                if (method_exists($dbType, 'getDateTimeClassName')) {
                    return '\\' . Type::build($type)->getDateTimeClassName();
                }

                return '\Cake\I18n\Time';
        }

        return null;
    }

    /**
     * Renders a map of DocBlock property types as an array of
     * `@property` hints.
     *
     * @param array $properties A key value pair where key is the name of a property and the value is the type.
     * @return array
     */
    public function propertyHints(array $properties)
    {
        $lines = [];
        foreach ($properties as $property => $attrs) {
            $lines[] = implode(' ', array_filter(array_values($attrs)));
        }

        return $lines;
    }

    /**
     * Build property, method, mixing annotations for table class.
     *
     * @param array $associations Associations list.
     * @param array $associationInfo Association info.
     * @param array $behaviors Behaviors list.
     * @param string $entity Entity name.
     * @param string $namespace Namespace.
     * @return array
     */
    public function buildTableAnnotations($associations, $associationInfo, $behaviors, $entity, $namespace)
    {
        $annotations = [];

        foreach ($associations as $type => $assocs) {
            foreach ($assocs as $assoc) {
                $typeStr = Inflector::camelize($type);
                $tableFqn = $associationInfo[$assoc['alias']]['targetFqn'];
                $annotations[] = [
                    '@property',
                    "{$tableFqn}|\Cake\ORM\Association\\{$typeStr}",
                    "\${$assoc['alias']}",
                ];
            }
        }

        if (!empty($annotations)) {
            $annotations[] = [];
        }

        $annotations[] = [
            "@method",
            "\\{$namespace}\\Model\\Entity\\{$entity} get(\$primaryKey, \$options = [])",
        ];
        $annotations[] = [
            "@method",
            "\\{$namespace}\\Model\\Entity\\{$entity} newEntity(\$data = null, array \$options = [])",
        ];
        $annotations[] = [
            "@method",
            "\\{$namespace}\\Model\\Entity\\{$entity}[] newEntities(array \$data, array \$options = [])",
        ];
        $annotations[] = [
            "@method",
            "\\{$namespace}\\Model\\Entity\\{$entity}|bool save(\\Cake\\Datasource\\EntityInterface \$entity, \$options = [])",
        ];
        $annotations[] = [
            "@method",
            "\\{$namespace}\\Model\\Entity\\{$entity}|bool saveOrFail(\\Cake\\Datasource\\EntityInterface \$entity, \$options = [])",
        ];
        $annotations[] = [
            "@method",
            "\\{$namespace}\\Model\\Entity\\{$entity} patchEntity(\\Cake\\Datasource\\EntityInterface \$entity, array \$data, array \$options = [])",
        ];
        $annotations[] = [
            "@method",
            "\\{$namespace}\\Model\\Entity\\{$entity}[] patchEntities(\$entities, array \$data, array \$options = [])",
        ];
        $annotations[] = [
            "@method",
            "\\{$namespace}\\Model\\Entity\\{$entity} findOrCreate(\$search, callable \$callback = null, \$options = [])",
        ];

        if (!empty($behaviors)) {
            if (!empty($annotations)) {
                $annotations[] = [];
            }

            foreach ($behaviors as $behavior => $behaviorData) {
                $className = App::className($behavior, 'Model/Behavior', 'Behavior');
                if ($className === false) {
                    $className = "Cake\ORM\Behavior\\{$behavior}Behavior";
                }

                $annotations[] = [
                    "@mixin",
                    '\\' . $className,
                ];
            }
        }

        return $annotations;
    }
}
